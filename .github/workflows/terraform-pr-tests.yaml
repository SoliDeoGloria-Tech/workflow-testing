name: Terraform

permissions:
  contents: read
  id-token: write # Required for OIDC authentication
  pull-requests: write # Required to update the PR with run details

on:
  pull_request:
    types:
      - opened
      - reopened
      - edited
      - synchronize
    paths:
      - "**.tf"

defaults:
  run:
    shell: bash

env:
  AZURE_STORAGE_AUTH_MODE: login
  TF_IN_AUTOMATION: true

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # format:
  #   name: Formatting
  #   uses: ./.github/workflows/terraform-format-suggest-fix.yaml
  #   with:
  #     runs-on: "['self-hosted', 'linux']"

  format:
    name: Format (Action)
    runs-on: [self-hosted, linux]
    steps:
      - name: Get Github App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.CHECKOUT_APP_ID }}
          private-key: ${{ secrets.CHECKOUT_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ vars.terraform_version || 'latest' }}

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ vars.tofu_version || 'latest' }}

      - name: Dump Variables
        run: env

      - name: Terrafom Formatting
        uses: oWretch/terraform-format@main
        with:
          create_review: true
          token: ${{ secrets.GITHUB_TOKEN }}

  lint:
    name: Linting
    runs-on: [self-hosted, linux]
    steps:
      - name: Get Github App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.CHECKOUT_APP_ID }}
          private-key: ${{ secrets.CHECKOUT_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Setup tflint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ vars.tflint_version || 'latest' }}

      - name: Initialize tflint
        run: tflint --init

      - name: Run tflint
        shell: bash --noprofile --norc +e -o pipefail {0}
        run: |
          tflint --format compact --no-color --recursive
          status=$?
          if [ $status -ne 0 ]; then
            printf "### :x: Linting failed" >> $GITHUB_STEP_SUMMARY
            exit $status
          fi
          printf "### :white_check_mark: Linting successful" >> $GITHUB_STEP_SUMMARY

  validate:
    name: Validation
    runs-on: [self-hosted, linux]
    steps:
      - name: Get Github App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.CHECKOUT_APP_ID }}
          private-key: ${{ secrets.CHECKOUT_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token || secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ vars.terraform_version || 'latest' }}

      - name: Terrafom Validation
        uses: oWretch/terraform-validate@main

  docs:
    name: Documentation
    needs:
      - lint
      - validate
    uses: ./.github/workflows/terraform-docs-report.yaml
    with:
      runs-on: "['self-hosted', 'linux']"
      terraform-docs-version: v0.17.0

  plan:
    name: Change Plan
    needs:
      - format
      - lint
      - validate
    runs-on: [self-hosted, linux]
    outputs:
      changes_required: ${{ steps.plan.outputs.exitcode == 2 }}
    steps:
      - name: Get Github App Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.CHECKOUT_APP_ID }}
          private-key: ${{ secrets.CHECKOUT_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          persist-credentials: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ vars.terraform_version || 'latest' }}

      - name: Inititialize Terraform
        run: terraform init
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Terraform Plan
        id: plan
        run: terraform plan -detailed-exitcode -no-color -out=tfplan
        env:
          ARM_USE_OIDC: true
          ARM_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          ARM_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Update Summary
        id: summary
        run: |
          case ${{ steps.plan.outputs.exitcode }} in
            0)
              printf '### :white_check_mark: No changes' >> $GITHUB_STEP_SUMMARY
              ;;
            2)
              printf '### :white_check_mark: Changes required\n' >> $GITHUB_STEP_SUMMARY
              printf '```\n${{ steps.plan.outputs.stdout }}\n```' >> $GITHUB_STEP_SUMMARY
              ;;
          esac

      - name: Post Plan as Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan');
            });

            // 2. Prepare format of the comment
            var header = `## Terraform Plan`;
            if (${{ steps.plan.outputs.exitcode}} == 2) {
              var planOutput = `${{ steps.plan.outputs.stdout}}`;
              if (planOutput.length > 64000) {
                header.concat(
                  '\n',
                  'Plan output too long for a comment. ',
                  'Please check the [run summary][${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}] for the full plan. ',
                  'A truncated version is included below.');
                planOutput = planOutput.substring(0, 64000);
              }
            } else {
              planOutput = 'No changes';
            }
            const output = `${header}\n\`\`\`${planOutput}\`\`\`\n`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              });
            }

      - name: Azure Login
        uses: azure/login@v2
        if: steps.plan.outputs.exitcode == 2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: true

      - name: Store Plan
        id: store
        if: steps.plan.outputs.exitcode == 2
        run: |
          # Extract the storage account from the Terraform backend configuration
          storage_account=$(cat backend.tf | grep storage_account_name | awk -F'"|"' '{print $2}')
          container_name=$(cat backend.tf | grep container_name | awk -F'"|"' '{print $2}')

          # Tar the plan and upload to the state storage account
          tar czf ${{ runner.temp }}/tfplan-${{ github.event.number }}.tar.gz .
          az storage blob upload --account-name ${storage_account} \
                                 --container-name ${container_name} \
                                 --file ${{ runner.temp }}/tfplan-${{ github.event.number }}.tar.gz \
                                 --overwrite true --validate-content

  infracost:
    name: Cost Estimation
    runs-on: [self-hosted, linux]
    needs:
      - plan
    if: needs.plan.outputs.changes_required == true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
          currency: AUD

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          allow-no-subscriptions: true

      - name: Download Plan
        run: |
          # Extract the storage account from the Terraform backend configuration
          storage_account=$(cat backend.tf | grep storage_account_name | awk -F'"|"' '{print $2}')
          container_name=$(cat backend.tf | grep container_name | awk -F'"|"' '{print $2}')

          # Download the plan and untar
          az storage blob download --account-name ${storage_account} \
                                   --container-name ${container_name} \
                                   --file ${{ runner.temp }}/tfplan-${{ github.event.number }}.tar.gz \
                                   --validate-content
          tar xzf ${{ runner.temp }}/tfplan-${{ github.event.number }}.tar.gz .

      - name: Add Infracost Details as Comment
        run: |
          terraform show -json tfplan > ${{ runner.temp }}/plan.json
          infracost breakdown --path ${{ runner.temp }}/plan.json \
                              --format json \
                              --out-file=${{ runner.temp }}/infracost.json
          infracost comment github --path=${{ runner.temp }}/infracost.json \
                                   --repo=${{ github.repository }} \
                                   --github-token=${{ secrets.GITHUB_TOKEN }} \
                                   --pull-request=${{ github.event.pull_request.number }} \
                                   --behavior=update
