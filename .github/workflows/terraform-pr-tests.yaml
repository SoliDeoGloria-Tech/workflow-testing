name: Terraform Pull Request

permissions:
  contents: read

on:
  pull_request:
    types: ["opened", "synchronize"]
    paths:
      - "**.tf"

jobs:
  format:
    runs-on: [self-hosted, linux, x64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2 # v3 uses NodeJS 20

      - name: Terraform Format
        run: terraform fmt -check -recursive
  validate:
    runs-on: [self-hosted, linux, x64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2 # v3 uses NodeJS 20

      - name: Terraform Init
        run: terraform init -backend=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
  plan:
    runs-on: [self-hosted, linux, x64]
    needs: [format, validate]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2 # v3 uses NodeJS 20

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -out=tfplan
        continue-on-error: true

      - name: Terraform Show
        id: show
        run: terraform show tfplan

      - name: Post Plan as Comment
        uses: actions/github-script@v7
        env:
          PLAN: "terraform\n${{ steps.show.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Single Workflow Plan')
            })
            switch ("${{ steps.plan.outcome }}".toLowerCase()) {
              case "success":
                plan_status = "✅"
                break;
              case "failure":
                plan_status = "❌"
                break;
              default: 
                plan_status = "⚠️"
            }

            // 2. Prepare format of the comment
            const output = `#### ${plan_status} Terraform Single Workflow Plan

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
