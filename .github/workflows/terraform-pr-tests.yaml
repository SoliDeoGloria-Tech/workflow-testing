name: Terraform

permissions:
  contents: read
  id-token: write # Required for OIDC authentication
  pull-requests: write # Required to update the PR with run details

on:
  pull_request:
    types:
      - opened
      - reopened
      - edited
      - synchronize
    paths:
      - "**.tf"

defaults:
  run:
    shell: bash
    # working-directory: .

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docs:
    name: Documentation
    runs-on: [self-hosted, linux]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install terraform-docs
        env:
          TFDOC_VERSION: v0.17.0
        run: |
          os=$(uname | tr '[:upper:]' '[:lower:]')
          arch=$(uname -m | sed 's/x86_64/amd64/')
          curl -Lo ./terraform-docs.tar.gz "https://github.com/terraform-docs/terraform-docs/releases/download/${TFDOC_VERSION}/terraform-docs-${TFDOC_VERSION}-${os}-${arch}.tar.gz"
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          mv terraform-docs /usr/local/bin/terraform-docs

      # If we dont initialize Terraform, can end up with inconsistent provider versions
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2 # v3 uses NodeJS 20
        with:
          terraform_version: ${{ vars.terraform_version || 'latest' }}

      - name: Inititialize Terraform
        run: terraform init -backend=false

      - name: Generate Docs
        run: |
          terraform-docs .
          git update-index --refresh
          git diff-index HEAD --
          if [ $? -ne 0 ]; then
            echo "::error ::Uncommitted change(s) found!"
            echo "### :x: Terraform Docs need to be updated" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          echo "### :white_check_mark: Terraform Docs up to date" >> $GITHUB_STEP_SUMMARY

  format:
    name: Formatting
    runs-on: [self-hosted, linux]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2 # v3 uses NodeJS 20

      - name: Terraform Format
        run: |
          terraform fmt -check -recursive
          status=$?
          if [ $status -ne 0 ]; then
            echo "### :x: Terraform Formatting need to be updated" >> $GITHUB_STEP_SUMMARY
            exit $status
          fi
          echo "### :white_check_mark: Terraform Formatting is correct" >> $GITHUB_STEP_SUMMARY

  lint:
    name: Linting
    runs-on: [self-hosted, linux]
    steps:
      # The runner GITHUB_TOKEN only has permissions to its own repository
      # so we need a token from an app to allow Terraform to download modules
      # from other repositories in the org.
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.CHECKOUT_APP_ID }}
          private-key: ${{ secrets.CHECKOUT_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}

      - name: Setup tflint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: ${{ vars.tflint_version || 'latest' }}

      - name: Initialize tflint
        run: tflint --init

      - name: Run tflint
        run: |
          tflint --format compact --no-color --recursive
          status=$?
          if [ $status -ne 0 ]; then
            echo "### :x: Terraform Linting failed" >> $GITHUB_STEP_SUMMARY
            exit $status
          fi
          echo "### :white_check_mark: Terraform Linting successful" >> $GITHUB_STEP_SUMMARY

  validate:
    name: Validation
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.CHECKOUT_APP_ID }}
          private-key: ${{ secrets.CHECKOUT_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          persist-credentials: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2 # v3 uses NodeJS 20
        with:
          terraform_version: ${{ vars.terraform_version || 'latest' }}

      - name: Inititialize Terraform
        run: terraform init -backend=false

      - name: Terraform Validate
        id: validate
        run: |
          terraform validate -no-color
          status=$?
          if [ $status -ne 0 ]; then
            echo "### :x: Terraform Linting failed" >> $GITHUB_STEP_SUMMARY
            exit $status
          fi
          echo "### :white_check_mark: Terraform Linting successful" >> $GITHUB_STEP_SUMMARY

  plan:
    name: Change Plan
    needs:
      - format
      - validate
    runs-on: [self-hosted, linux]
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.CHECKOUT_APP_ID }}
          private-key: ${{ secrets.CHECKOUT_APP_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ steps.app-token.outputs.token }}
          persist-credentials: true

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2 # v3 uses NodeJS 20
        with:
          terraform_version: ${{ vars.terraform_version || 'latest' }}

      - name: Inititialize Terraform
        run: terraform init

      - name: Terraform Plan
        id: plan
        continue-on-error: true
        run: |
          terraform plan -no-color -out=tfplan
          status=$?
          if [ $status -ne 0 ]; then
            echo "### :x: Terraform Plan failed" >> $GITHUB_STEP_SUMMARY
            exit $status
          fi
          echo "### :white_check_mark: Terraform Plan successful" >> $GITHUB_STEP_SUMMARY

      - name: Terraform Show
        id: show
        run: terraform show -no-color tfplan

      - name: Post Plan as Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Plan
            \`\`\`\n
            ${{ steps.show.outputs.stdout }}
            \`\`\`
            `;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
          currency: AUD

      - name: Add Infracost Details as Comment
        run: |
          terraform show -json tfplan | tee ${{ runner.temp }}/plan.json
          infracost breakdown --path ${{ runner.temp }}/plan.json \
                              --format json \
                              --out-file=${{ runner.temp }}/infracost.json
          infracost comment github --path=${{ runner.temp }}/infracost.json \
                                     --repo=${{ github.repository }} \
                                     --github-token=${{ secrets.GITHUB_TOKEN }} \
                                     --pull-request=${{ github.event.pull_request.number }} \
                                     --behavior=update
